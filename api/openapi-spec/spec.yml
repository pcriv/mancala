---
openapi: "3.0.0"
info:
  version: 1.0.0
  title:  Mancala API
  license:
    name: MIT
servers:
  - url: https://mancala.herokuapp.com/v1
    description: "Production"
  - url: http://localhost:1323/v1
    description: "local"
    asdsa: "sadsa"
paths:
  /games:
    post:
      summary: Create game
      operationId: createGame
      tags:
        - Games
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - player1
                - player2
              properties:
                player1:
                  type: string
                player2:
                  type: string
      responses:
        "201":
          description: Game created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
              example:
                id: "37d5b35c-f90e-4136-90f8-500d6c43b1bf"
                turn: 0
                result: 4
                board_side1:
                  pits: [6, 6, 6, 6, 6, 6]
                  store: 0
                  player:
                    name: Player1
                    score: 0
                board_side2:
                  pits: [6, 6, 6, 6, 6, 6]
                  store: 0
                  player:
                    name: Player2
                    score: 0

        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                errors:
                  - "player1 can not be blank."
                  - "player2 can not be blank."
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /games/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Show game
      description: Retrieves a game
      operationId: showGame
      tags:
        - Games
      responses:
        "200":
          description: Game
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
              example:
                id: "37d5b35c-f90e-4136-90f8-500d6c43b1bf"
                turn: 0
                result: 3
                board_side1:
                  pits: [0, 7, 7, 7, 7, 7]
                  store: 1
                  player:
                    name: Player1
                    score: 0
                board_side2:
                  pits: [6, 6, 6, 6, 6, 6]
                  store: 0
                  player:
                    name: Player2
                    score: 0
        "404":
          description: Not found

        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    patch:
      summary: Update game
      description: Updates a game by playing the corresponding next turn
      operationId: updateGame
      tags:
        - Games
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - pit_index
              properties:
                pit_index:
                  type: integer
                  format: int64
                  minimum: 0
                  maximum: 5

      responses:
        "200":
          description: Game updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
              example:
                id: "37d5b35c-f90e-4136-90f8-500d6c43b1bf"
                turn: 0
                result: 3
                board_side1:
                  pits: [0, 7, 7, 7, 7, 7]
                  store: 1
                  player:
                    name: Player1
                    score: 0
                board_side2:
                  pits: [6, 6, 6, 6, 6, 6]
                  store: 0
                  player:
                    name: Player2
                    score: 0
        "404":
          description: Not found

        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                errors:
                  - "pit index is invalid."
                  - "selected pit is empty."
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    Result:
      type: integer
      format: int64
      description:
        The result of the game. `0` = `Player1Wins`, `1` = `Player2Wins`, `2` = `Tie`, `3` = `Undefined`.
      enum:
        - 0
        - 1
        - 2
        - 3
    Turn:
      type: integer
      format: int64
      description:
        The turn that needs to play next. `0` = `Player1`, `1` = `Player2`.
      enum:
        - 0
        - 1
    Player:
      type: object
      required:
        - name
        - score
      properties:
        name:
          description: The name of the player
          type: string
        score:
          description: The score of the player
          type: integer
          format: int64
    BoardSide:
      type: object
      required:
        - pits
        - store
        - player
      description:
        A side of the board
      properties:
        pits:
          description: The pits of the board side
          type: array
          maxItems: 6
          items:
            type: integer
            minimum: 0
            format: int64
        store:
          description: The store (big pit) of the board side
          type: integer
          format: int64
        player:
          description: The player assigned to the board side
          $ref: "#/components/schemas/Player"
    Game:
      type: object
      required:
        - id
        - turn
        - result
        - board_side1
        - board_side2
      properties:
        id:
          description: The id of the game
          type: string
        result:
          $ref: "#/components/schemas/Result"
        turn:
          $ref: "#/components/schemas/Turn"
        board_side1:
          allOf:
            - description: The upper side of the game board
            - $ref: "#/components/schemas/BoardSide"
        board_side2:
          allOf:
            - description: The lower side of the game board
            - $ref: "#/components/schemas/BoardSide"
    ErrorResponse:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            type: string