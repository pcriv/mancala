// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXS2/jNhD+KwTbQwswkWzH2a6BHjbtNjDQLoIkix6yQUCLY5sLiVRJ2okR+L8XQ+pp",
	"yY4TbB/wwXzO4/uGM6Nnmugs1wqUs3TyTOGJZ3kKfnyV8s3HMMfpmqcrP1jwzP/PNDfiwUoBA5zmEkXc",
	"xexd+btnNE/5BgxuK3/LCwUzoIzaRBugk3jLqHV+ONiyhtBhQ+g5q377hQ57heJQCjqho3diPBuNk5P5",
	"+xhOzgaj85P38fynk3Eci/PkbDQbzOaUUQN2lTo6GTHqVkYFAV6jeMile5BKwBOdjLdbXOeGZ+DAeMAu",
	"eQbTX3EkFZ3QnLslZaWNUnjhf62kAUEnzqwAzV1CxvGG2+R4yjoj1YJ64XgYrLvQQgZCPsEjqrjQYoPT",
	"RCsHyuGQ53kqE+6kVtFXqxWu1bJzo3MwrpCSFwx0lZbIDvsMahp/Vwmpr9yz8oqefYXE1T7UDm8Z+oBs",
	"vdoHLoTELZ5eNbyZ89QC23WwZumZzrXJuEP8lTs/o4xm/Elmq4xOxoxmUoVxXBkvlYMFmK7DldCjHPUr",
	"NtfKBpsuuLgOdL7K6+8NzOmEfhfVrzQKuzb6aIw2QbkAmxiZoxA6obdLIEXskEduiVRrnkqB/E6VA6N4",
	"egNmDSZI+MftKZUS67USCAcZ/aTdb3qlxL8Dic0hkXMJghiwemUS8Ogo7cjcW7FlPpH8YoA7OMao3WS5",
	"z7zyXNTMqGjkvidaZthDvmImoL2p6dsFvbejR0X/E2hDjr6SpMCydja8BkzyN1J4J9vXPhDM/UTPiVsC",
	"8dWA9jxw272JHONO666XRhmVDjLbD80BODxw03D1vNrmxvBNnS1fIioUJ1pXpD7D/Rb5YSYX6MOPvT50",
	"TH85ZVlaaq2s7XLHaJUI2jhnYC1fwMvVINHewPJ8n4rLIqTbGnZaiEMw1jHT7RKOvidFP/xSlIgXId+p",
	"jGVbcFjZdTi1LXuHw6dv8cwulkWf4OUUYlgLp7b3fVhfVXHZRlsVHHT9x50SgSJOejAomqve+MWtjoTX",
	"RqwK4Ac9fZ5dVyz0lTzca/J4SmLy85dVHI+AfFYC5lKBIINqrehF/5TKkuHO6tCvjqrVWwlfkAlQmCvu",
	"YjZgQza678sZtwX1XRORTeKW3BEFICxx2mNFFDy5prGFYR1Thy0DepQjoFLNNapPZQLKQqNN/mN660NT",
	"utRPuUp4ysmHqylldA3GBksHp/FpjAd1DornEntnv8R8S+tDKUJ8QzLWoafBQPPlcYrNdiiil4HPupHd",
	"WyJbvW7UbHR3O6lhPDi+NL9YkVFNVZHZkW1GKL3dkofrdclj9CyO9/tbuBQ1OsMto+NjrvR1cb7CrrKM",
	"m00Ff5XM+AI/orx9lt7j0cBf9CzF1jcc0POorsEZCWuwhJeS2iTfLPVjRXGLovj/TFGg5uxlnKv+9NsR",
	"g5Dto6X9OXnXr6w+EhWfm9v7Np8RppTwNN8mjlVvuo3d51xwV0UDmW188pJq4RNuok0AQuAKZjRSFK++",
	"zODb5bdlhurzcU9mOExRs8N/2xP9r0LnCgzW0wBtHvDrvGy84SUEytsE/q4TnlJGVyalE7oeRBg7fwcA",
	"AP//YG43VAISAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
