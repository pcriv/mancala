// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXW2/bthf/KgT//4cNYCLZTtJVwB7arSsCbEWQpthDGhS0eGyzk0iNpNIYgb77cEhd",
	"Ldlxg+4CP5jXc/n9Ds85eqSpzgutQDlLk0cKDzwvMvDjq4xv34Q5Tu95VvrBmuf+f6m5EZ+sFDDDaSFR",
	"xG3MXjS/O0aLjG/B4Lbyt7xQMDPKqE21AZrEFaPW+eGsYj2h857QC9b+9gudTwrFoRQ0oYsX4ny5OE9P",
	"Vi9jODmbLS5OXsarH07O41hcpGeL5Wy5oowasGXmaLJg1JVGBQFeo/hUSPdJKgEPNDmvKlznhufgwHjA",
	"3vIcLn/GkVQ0oQV3G8oaG6Xwwv8spQFBE2dKQHM3kHO8sdIm544mtCz9Sbct8JZ1Rqo19crwMlj3WgsZ",
	"CHoHX1Dlay22OE21cqAcDnlRZDLlTmoVfbZa4VqnqzC6AONqKUXNSPK4q7RBej6xV/WduW2FdFfuWh/0",
	"8jOkrvOhA6Bi6AOy99U+cCEkbvHsqufNimcW2K6DHWs9nKVyF2eU0Zw/yLzMaXLOaC5VGMet8VI5WIMZ",
	"O9wKPcpRv2ILrWyw6TUX14HOr/L6/wZWNKH/i7pXG4VdG70xRpugXIBNjSxQCE3ozQZIHTvkC7dEqnue",
	"SYH8XioHRvHsPZh7MEHC325Po5RYr5VAOMjoO+1+0aUS/wwktoBUriQIYsDq0qTg0VHakZW3omI+sfxk",
	"gDs4xqjd5LnPvOZc1M+waOS+J9pk3EO+Yiagk6nq2wW9t2NCxfQTGEKOvpK0xrJzNrwGTPrvpfBODq+9",
	"IlgLiF4RtwHiqwOdeOB2fBM5xp3BXS+NMiod5HYamgNweOAuw9WLdpsbw7ddtnyKqFCsaFehpgz3W+S7",
	"pVyjD99P+jAy/emUZWmjtbV2zB2jbSIY4pyDtXwNT1eDVHsDm/NTKt7WIT3UsNNSHIKxi5lx13D0PSmm",
	"4ZeiQbwO+VFlbNqEw8quw6mq6SUOn77BM7tY1n2Dl1OLYQOcht5PYX3VxuUQbVVzMPYfdxoE6jiZwKBu",
	"tibjF7dGEr42YlUAP+iZ8uy6ZWGq5OFen8dTEpMfP5ZxvADyQQlYSQWCzNq1ujf9XSpL5jurc7+6aFdv",
	"JHxEJkBhrriN2YzN2eJuKmfc1NSPTUQ2idtwRxSAsMRpjxVR8OD6xtaGjUydDwyYUI6ASrXSqD6TKSgL",
	"vbb5t8sbH5rSZX7KVcozTl5dXVJG78HYYOnsND6N8aAuQPFCYi/tl5hvcX0oRYhvSMY69DQYaL48XmLz",
	"HYro28Bn18juLZGDXjfqN7q7ndQ8nh1fmp+syKimrcjsyDYjlN5xycP1ruQxehbH+/2tXYp6nWHF6Pkx",
	"V6a6OF9hyzznZtvC3yYzvsaPKm+fpXd4NPAXPUpR+YYDJh7VNTgj4R4s4Y2kIcnvN/pLS/GAovi/TFGg",
	"5uxpnNv+9NsRg5Dto2X4eXk7raw7EtWfn9XdkM8IU0p4ms8Tx9o3PcTuQyG4a6OBLLc+eUm19gk31SYA",
	"IXAFMxqpi9dUZvDt8vMyQ/v5uCczHKao3+E/74n+W6FzBQbraYC2CPiNXjbe8BIC5TstudGiTP2E0dJk",
	"NKEb5wqbRFEeasHpBoz+o+RFcZrqPLqfRbRiu2J+1SnPWgn+zF31VwAAAP//uuDp/VkSAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

