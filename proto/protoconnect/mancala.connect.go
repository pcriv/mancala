// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mancala.proto

// buf:lint:ignore PACKAGE_DIRECTORY_MATCH
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package protoconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	proto "github.com/pcriv/mancala/proto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "mancala.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceCreateGameProcedure is the fully-qualified name of the Service's CreateGame RPC.
	ServiceCreateGameProcedure = "/mancala.Service/CreateGame"
	// ServiceFindGameProcedure is the fully-qualified name of the Service's FindGame RPC.
	ServiceFindGameProcedure = "/mancala.Service/FindGame"
	// ServiceExecutePlayProcedure is the fully-qualified name of the Service's ExecutePlay RPC.
	ServiceExecutePlayProcedure = "/mancala.Service/ExecutePlay"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	serviceServiceDescriptor           = proto.File_mancala_proto.Services().ByName("Service")
	serviceCreateGameMethodDescriptor  = serviceServiceDescriptor.Methods().ByName("CreateGame")
	serviceFindGameMethodDescriptor    = serviceServiceDescriptor.Methods().ByName("FindGame")
	serviceExecutePlayMethodDescriptor = serviceServiceDescriptor.Methods().ByName("ExecutePlay")
)

// ServiceClient is a client for the mancala.Service service.
type ServiceClient interface {
	CreateGame(context.Context, *connect.Request[proto.CreateGameRequest]) (*connect.Response[proto.CreateGameResponse], error)
	FindGame(context.Context, *connect.Request[proto.FindGameRequest]) (*connect.Response[proto.FindGameResponse], error)
	ExecutePlay(context.Context, *connect.Request[proto.ExecutePlayRequest]) (*connect.Response[proto.ExecutePlayResponse], error)
}

// NewServiceClient constructs a client for the mancala.Service service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceClient{
		createGame: connect.NewClient[proto.CreateGameRequest, proto.CreateGameResponse](
			httpClient,
			baseURL+ServiceCreateGameProcedure,
			connect.WithSchema(serviceCreateGameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		findGame: connect.NewClient[proto.FindGameRequest, proto.FindGameResponse](
			httpClient,
			baseURL+ServiceFindGameProcedure,
			connect.WithSchema(serviceFindGameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		executePlay: connect.NewClient[proto.ExecutePlayRequest, proto.ExecutePlayResponse](
			httpClient,
			baseURL+ServiceExecutePlayProcedure,
			connect.WithSchema(serviceExecutePlayMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	createGame  *connect.Client[proto.CreateGameRequest, proto.CreateGameResponse]
	findGame    *connect.Client[proto.FindGameRequest, proto.FindGameResponse]
	executePlay *connect.Client[proto.ExecutePlayRequest, proto.ExecutePlayResponse]
}

// CreateGame calls mancala.Service.CreateGame.
func (c *serviceClient) CreateGame(ctx context.Context, req *connect.Request[proto.CreateGameRequest]) (*connect.Response[proto.CreateGameResponse], error) {
	return c.createGame.CallUnary(ctx, req)
}

// FindGame calls mancala.Service.FindGame.
func (c *serviceClient) FindGame(ctx context.Context, req *connect.Request[proto.FindGameRequest]) (*connect.Response[proto.FindGameResponse], error) {
	return c.findGame.CallUnary(ctx, req)
}

// ExecutePlay calls mancala.Service.ExecutePlay.
func (c *serviceClient) ExecutePlay(ctx context.Context, req *connect.Request[proto.ExecutePlayRequest]) (*connect.Response[proto.ExecutePlayResponse], error) {
	return c.executePlay.CallUnary(ctx, req)
}

// ServiceHandler is an implementation of the mancala.Service service.
type ServiceHandler interface {
	CreateGame(context.Context, *connect.Request[proto.CreateGameRequest]) (*connect.Response[proto.CreateGameResponse], error)
	FindGame(context.Context, *connect.Request[proto.FindGameRequest]) (*connect.Response[proto.FindGameResponse], error)
	ExecutePlay(context.Context, *connect.Request[proto.ExecutePlayRequest]) (*connect.Response[proto.ExecutePlayResponse], error)
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serviceCreateGameHandler := connect.NewUnaryHandler(
		ServiceCreateGameProcedure,
		svc.CreateGame,
		connect.WithSchema(serviceCreateGameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceFindGameHandler := connect.NewUnaryHandler(
		ServiceFindGameProcedure,
		svc.FindGame,
		connect.WithSchema(serviceFindGameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceExecutePlayHandler := connect.NewUnaryHandler(
		ServiceExecutePlayProcedure,
		svc.ExecutePlay,
		connect.WithSchema(serviceExecutePlayMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/mancala.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceCreateGameProcedure:
			serviceCreateGameHandler.ServeHTTP(w, r)
		case ServiceFindGameProcedure:
			serviceFindGameHandler.ServeHTTP(w, r)
		case ServiceExecutePlayProcedure:
			serviceExecutePlayHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) CreateGame(context.Context, *connect.Request[proto.CreateGameRequest]) (*connect.Response[proto.CreateGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mancala.Service.CreateGame is not implemented"))
}

func (UnimplementedServiceHandler) FindGame(context.Context, *connect.Request[proto.FindGameRequest]) (*connect.Response[proto.FindGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mancala.Service.FindGame is not implemented"))
}

func (UnimplementedServiceHandler) ExecutePlay(context.Context, *connect.Request[proto.ExecutePlayRequest]) (*connect.Response[proto.ExecutePlayResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mancala.Service.ExecutePlay is not implemented"))
}
